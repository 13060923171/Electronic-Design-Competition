;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2009-7-19
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega16L
;Program type        : Application
;Clock frequency     : 16.000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 64
;#define MyAddress 0x01      // ×Ô¼ºµÄµØÖ·
;/**************±äÁ¿ÉùÃ÷***************/
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;// USART Receiver interrupt service routine
;char str[] = "hello\n";

	.DSEG
;char frameData[16];
;char state;
;bit statechanged = 0;
;/***************º¯ÊýÉùÃ÷****************/
;char doFrameOk();
;void doCommand();
;void uartSend(char sendCmd, char sendData);
;void balan();
;void move(char mode);
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0041 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0042 char status,data;
; 0000 0043 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0044 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0045 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0046    {
; 0000 0047    rx_buffer[rx_wr_index]=data;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0048    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0049    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 004A       {
; 0000 004B       rx_counter=0;
;PCODE: $00000029 VOL: 0
; 0000 004C       rx_buffer_overflow=1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004D       };
;PCODE: $0000002D VOL: 0
; 0000 004E    };
;PCODE: $0000002E VOL: 0
; 0000 004F }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0056 {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0057 char data;
; 0000 0058 
; 0000 0059 unsigned int i;
; 0000 005A for(i=0;i<(unsigned int)(16*143-2);i++)
;PCODE: $00000035 VOL: 0
;	data -> R17
;	i -> R18,R19
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 005B     if(rx_counter!=0)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005C         break;
;PCODE: $00000041 VOL: 0
; 0000 005D 
; 0000 005E 
; 0000 005F 
; 0000 0060 data=rx_buffer[rx_rd_index];
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0061 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0062 #asm("cli")
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
	cli
;PCODE: $00000053 VOL: 0
; 0000 0063 --rx_counter;
;PCODE: $00000054 VOL: 0
; 0000 0064 #asm("sei")
;PCODE: $00000055 VOL: 0
	sei
;PCODE: $00000056 VOL: 0
; 0000 0065 return data;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0066 }
;PCODE: $0000005B VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 0070 {
;PCODE: $0000005C VOL: 0
; 0000 0071 // Declare your local variables here
; 0000 0072 
; 0000 0073 // Input/Output Ports initialization
; 0000 0074 // Port A initialization
; 0000 0075 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0076 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0077 PORTA=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0078 DDRA=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0079 
; 0000 007A // Port B initialization
; 0000 007B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007D PORTB=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007E DDRB=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 007F 
; 0000 0080 // Port C initialization
; 0000 0081 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0082 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0083 PORTC=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0084 DDRC=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0085 
; 0000 0086 // Port D initialization
; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0089 PORTD=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 008A DDRD=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 008B 
; 0000 008C // Timer/Counter 0 initialization
; 0000 008D // Clock source: System Clock
; 0000 008E // Clock value: Timer 0 Stopped
; 0000 008F // Mode: Normal top=FFh
; 0000 0090 // OC0 output: Disconnected
; 0000 0091 TCCR0=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0092 TCNT0=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0093 OCR0=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0094 
; 0000 0095 // Timer/Counter 1 initialization
; 0000 0096 // Clock source: System Clock
; 0000 0097 // Clock value: Timer 1 Stopped
; 0000 0098 // Mode: Normal top=FFFFh
; 0000 0099 // OC1A output: Discon.
; 0000 009A // OC1B output: Discon.
; 0000 009B // Noise Canceler: Off
; 0000 009C // Input Capture on Falling Edge
; 0000 009D // Timer 1 Overflow Interrupt: Off
; 0000 009E // Input Capture Interrupt: Off
; 0000 009F // Compare A Match Interrupt: Off
; 0000 00A0 // Compare B Match Interrupt: Off
; 0000 00A1 TCCR1A=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00A2 TCCR1B=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A3 TCNT1H=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A4 TCNT1L=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A5 ICR1H=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A6 ICR1L=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A7 OCR1AH=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A8 OCR1AL=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A9 OCR1BH=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00AA OCR1BL=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00AB 
; 0000 00AC // Timer/Counter 2 initialization
; 0000 00AD // Clock source: System Clock
; 0000 00AE // Clock value: Timer 2 Stopped
; 0000 00AF // Mode: Normal top=FFh
; 0000 00B0 // OC2 output: Disconnected
; 0000 00B1 ASSR=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B2 TCCR2=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00B3 TCNT2=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00B4 OCR2=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00B5 
; 0000 00B6 // External Interrupt(s) initialization
; 0000 00B7 // INT0: Off
; 0000 00B8 // INT1: Off
; 0000 00B9 // INT2: Off
; 0000 00BA MCUCR=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00BB MCUCSR=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00BC 
; 0000 00BD // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00BE TIMSK=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00BF 
; 0000 00C0 // USART initialization
; 0000 00C1 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00C2 // USART Receiver: On
; 0000 00C3 // USART Transmitter: On
; 0000 00C4 // USART Mode: Asynchronous
; 0000 00C5 // USART Baud Rate: 19200
; 0000 00C6 UCSRA=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00C7 UCSRB=0x98;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00C8 UCSRC=0x86;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00C9 UBRRH=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00CA UBRRL=0x33;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00CB 
; 0000 00CC // Analog Comparator initialization
; 0000 00CD // Analog Comparator: Off
; 0000 00CE // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00CF ACSR=0x80;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00D0 SFIOR=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00D1 
; 0000 00D2 // Global enable interrupts
; 0000 00D3 DDRA=0xf0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00D4 PORTA = 0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00D5 PORTD=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00D6 DDRD=0x30;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00D7 // Timer/Counter 1 initialization
; 0000 00D8 // Clock source: System Clock
; 0000 00D9 // Clock value: 250.000 kHz
; 0000 00DA // Mode: Ph. correct PWM top=01FFh
; 0000 00DB // OC1A output: Non-Inv.
; 0000 00DC // OC1B output: Non-Inv.
; 0000 00DD // Noise Canceler: Off
; 0000 00DE // Input Capture on Falling Edge
; 0000 00DF // Timer 1 Overflow Interrupt: Off
; 0000 00E0 // Input Capture Interrupt: Off
; 0000 00E1 // Compare A Match Interrupt: Off
; 0000 00E2 // Compare B Match Interrupt: Off
; 0000 00E3 TCCR1A=0xa2;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00E4 TCCR1B=0x12;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00E5 TCNT1H=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00E6 TCNT1L=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00E7 ICR1H=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00E8 ICR1L=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00E9 OCR1AH=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00EA OCR1AL=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00EB OCR1BH=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00EC OCR1BL=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00ED ACSR=0x80;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00EE ICR1H = 0x01;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00EF ICR1L = 0xf0;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00F0 #asm("sei")
;PCODE: $000000C5 VOL: 0
	sei
;PCODE: $000000C6 VOL: 0
; 0000 00F1 puts(str);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00F2 while (1)
;PCODE: $000000CA VOL: 0
; 0000 00F3 {
; 0000 00F4 //   Place your code here
; 0000 00F5     if(getchar() == 0x55)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00F6     {
; 0000 00F7         if(doFrameOk())
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00F8         {
; 0000 00F9          doCommand();
;PCODE: $000000D1 VOL: 0
; 0000 00FA         }
; 0000 00FB     }
;PCODE: $000000D2 VOL: 0
; 0000 00FC     balan();
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00FD };
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00FE }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;void balan()
; 0000 0100 {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0101     switch(state)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0102     {
; 0000 0103         case 1:
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0104                 move(4);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0105                 delay_ms(250);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0106                 move(0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0107                 delay_ms(250);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0108             break;
;PCODE: $000000EC VOL: 0
; 0000 0109         case 2:
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 010A                 move(3);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 010B                 delay_ms(250);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 010C                 move(0);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 010D                 delay_ms(250);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 010E             break;
;PCODE: $000000FC VOL: 0
; 0000 010F         case 3:
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0110             move(0);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0111             break;
;PCODE: $00000103 VOL: 0
; 0000 0112         default:
;PCODE: $00000104 VOL: 0
; 0000 0113             move(0);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0114             break;
;PCODE: $00000108 VOL: 0
; 0000 0115     }
;PCODE: $00000109 VOL: 0
; 0000 0116 }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;/*************ÒÆ¶¯º¯Êý(0:Í£Ö¹, 1:È«ËÙÇ°ÐÐ,2:È«ËÙºóÍË, 3:ÂýËÙÇ°ÐÐ, 4:ÂýËÙºóÍË) **********************/
;void move(char mode)
; 0000 0119 {
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 011A     switch(mode)
;	mode -> Y+0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 011B     {
; 0000 011C         case 0:
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 011D             //É²³µÃüÁî
; 0000 011E             PORTA.4 = PORTA.6 = ~PORTA.4;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 011F             PORTA.5 = PORTA.7 = ~PORTA.5;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0120             OCR1A = OCR1B = 0x00ee;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0121             delay_ms(250);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0122             //ÓÐ±ØÒªÊ±¼ÓÉÏÇã½Ç¼ì²âÃüÁî
; 0000 0123 
; 0000 0124             PORTA.4 = PORTA.6 = 0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0125             PORTA.5 = PORTA.7 = 0;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0126             OCR1A = OCR1B = 0x01f0;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0127             putchar('4');
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0128             break;
;PCODE: $0000014E VOL: 0
; 0000 0129         case 1:
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 012A             PORTA.4 = PORTA.6 = 0;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 012B             PORTA.5 = PORTA.7 = 1;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 012C             OCR1AH = OCR1BH = 0x01;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 012D             OCR1AL = OCR1BL = 0xf0;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 012E             putchar('2');
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 012F             break;
;PCODE: $00000163 VOL: 0
; 0000 0130         case 2:
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0131             PORTA.4 = PORTA.6 = 1;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0132             PORTA.5 = PORTA.7 = 0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0133             OCR1AH = OCR1BH = 0x01;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0134             OCR1AL = OCR1BL = 0xf0;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0135             putchar('3');
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0136             break;
;PCODE: $00000178 VOL: 0
; 0000 0137         case 3:
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0138             PORTA.4 = PORTA.6 = 0;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0139             PORTA.5 = PORTA.7 = 1;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 013A             OCR1AH = OCR1BH = 0x01;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 013B             OCR1AL = OCR1BL = 0x40;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 013C             putchar('2');
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 013D             break;
;PCODE: $0000018D VOL: 0
; 0000 013E         case 4:
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 013F             PORTA.4 = PORTA.6 = 1;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0140             PORTA.5 = PORTA.7 = 0;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0141             OCR1AH = OCR1BH = 0x01;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0142             OCR1AL = OCR1BL = 0x40;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0143             putchar('3');
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 0144             break;
;PCODE: $000001A2 VOL: 0
; 0000 0145     }
;PCODE: $000001A3 VOL: 0
; 0000 0146 }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;char doFrameOk()
; 0000 0148 {
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0149     char flag=0, k=0,i,frameLen;
; 0000 014A     if(getchar() == 0xaa)
;PCODE: $000001A9 VOL: 0
;	flag -> R17
;	k -> R16
;	i -> R19
;	frameLen -> R18
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 014B         k++;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 014C     if(getchar() == MyAddress)
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 014D         k++;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 014E     if(k == 2)
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 014F     {
; 0000 0150         flag = 1;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0151         frameLen = getchar();
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0152         for(i = 0;i < frameLen; i++)
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0153         {
; 0000 0154             frameData[i] = getchar();
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0155         }
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0156 
; 0000 0157     }
; 0000 0158     return flag;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0159 }
;PCODE: $000001DB VOL: 0
;void doCommand()
; 0000 015B {
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 015C //    int i = 1;
; 0000 015D     switch(frameData[0])
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 015E     {
; 0000 015F         case 0x01: uartSend(0xff, 0x00);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0160         break;
;PCODE: $000001E7 VOL: 0
; 0000 0161         case 0x02:
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0162             PORTA.4 = PORTA.6 = 1;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0163             PORTA.5 = PORTA.7 = 0;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0164             OCR1AH = OCR1BH = frameData[1];
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0165             OCR1AL = OCR1BL = frameData[2];
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0166             putchar('2');
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0167             break;
;PCODE: $000001FE VOL: 0
; 0000 0168         case 0x03:
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0169             PORTA.4 = PORTA.6 = 0;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 016A             PORTA.5 = PORTA.7 = 1;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 016B             OCR1AH = OCR1BH = frameData[1];
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 016C             OCR1AL = OCR1BL = frameData[2];
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 016D             putchar('3');
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 016E             break;
;PCODE: $00000215 VOL: 0
; 0000 016F         case 0x04:
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0170 //É²³µÃüÁî
; 0000 0171             PORTA.4 = PORTA.6 = ~PORTA.4;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0172             PORTA.5 = PORTA.7 = ~PORTA.5;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0173             OCR1A = OCR1B = 0x00ee;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0174             delay_ms(250);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0175 //Çã½Ç¼ì²âÃüÁî
; 0000 0176 //            if(state == 1)
; 0000 0177 //            {
; 0000 0178 //                PORTA.4 = PORTA.6 = 1;
; 0000 0179 //                PORTA.5 = PORTA.7 =
; 0000 017A //            }
; 0000 017B //            if
; 0000 017C             PORTA.4 = PORTA.6 = 0;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 017D             PORTA.5 = PORTA.7 = 0;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 017E             OCR1A = OCR1B = 0x01f0;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 017F             putchar('4');
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0180             break;
;PCODE: $00000255 VOL: 0
; 0000 0181         case 0x05:
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 0182             PORTA.4 = PORTA.7 = 1;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0183             PORTA.5 = PORTA.6 = 0;
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0184             OCR1AH = OCR1BH = frameData[1];
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0185             OCR1AL = OCR1BL = frameData[2];
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0186             putchar('5');
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0187             break;
;PCODE: $0000026C VOL: 0
; 0000 0188         case 0x06:
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0189             PORTA.4 = PORTA.7 = 0;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 018A             PORTA.5 = PORTA.6 = 1;
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 018B             OCR1AH = OCR1BH = frameData[1];
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 018C             OCR1AL = OCR1BL = frameData[2];
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 018D             putchar('6');
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 018E             break;
;PCODE: $00000283 VOL: 0
; 0000 018F         case 0x07:
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0190             PORTA.4 = PORTA.6 = 1;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0191             PORTA.5 = PORTA.7 = 0;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 0192             OCR1AH = frameData[1];
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0193             OCR1AL = frameData[2];
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 0194             OCR1BH = frameData[3];
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0195             OCR1BL = frameData[4];
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0196             putchar('7');
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0197             break;
;PCODE: $0000029E VOL: 0
; 0000 0198         case 0x08:
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0199             PORTA.4 = PORTA.6 = 0;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 019A             PORTA.5 = PORTA.7 = 1;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 019B             OCR1AL = frameData[1];
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 019C             OCR1AL = frameData[2];
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 019D             OCR1BH = frameData[3];
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 019E             OCR1BL = frameData[4];
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 019F             putchar('8');
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 01A0             break;
;PCODE: $000002B9 VOL: 0
; 0000 01A1     //½ÓÊÜÆ½ºâ×´Ì¬Ö¸Ê¾
; 0000 01A2         case 0x09:
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 01A3             state = 1;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 01A4             statechanged = 1;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 01A5             putchar('9');
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 01A6             break;
;PCODE: $000002C5 VOL: 0
; 0000 01A7         case 0x0a:
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01A8             state = 2;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 01A9             statechanged = 1;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 01AA             putchar('a');
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 01AB             break;
;PCODE: $000002D1 VOL: 0
; 0000 01AC         case 0x0b:
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 01AD             state = 3;
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 01AE             statechanged = 1;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 01AF             putchar('b');
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 01B0             break;
;PCODE: $000002DD VOL: 0
; 0000 01B1         default: uartSend(0xee, 0x00);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 01B2     }
;PCODE: $000002E4 VOL: 0
; 0000 01B3 }
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;void uartSend(char sendCmd, char sendData)
; 0000 01B5 {
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 01B6         putchar(0x55);
;	sendCmd -> Y+1
;	sendData -> Y+0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 01B7         putchar(0xaa);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 01B8         putchar(0x02);
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01B9         putchar(sendCmd);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01BA         putchar(sendData);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 01BB         putchar('\n');
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 01BC }
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
